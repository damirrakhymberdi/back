# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API —á–µ—Ä–µ–∑ PowerShell
Write-Host "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI IDE BAS Reviews API..." -ForegroundColor Green

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
$testToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwiaWF0IjoxNzM3MDQ4MDAwfQ.example"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function Test-API {
    param(
        [string]$Method,
        [string]$Url,
        [string]$Body = $null,
        [hashtable]$Headers = @{}
    )
    
    try {
        $response = Invoke-RestMethod -Uri $Url -Method $Method -Body $Body -Headers $Headers -ContentType "application/json"
        return @{ Success = $true; Data = $response }
    }
    catch {
        return @{ Success = $false; Error = $_.Exception.Message; StatusCode = $_.Exception.Response.StatusCode.value__ }
    }
}

# –¢–µ—Å—Ç 1: Health Check
Write-Host "`n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Health Check..." -ForegroundColor Yellow
$healthTest = Test-API -Method "GET" -Url "http://localhost:3000/health"
if ($healthTest.Success -and $healthTest.Data.status -eq "OK") {
    Write-Host "‚úÖ Health Check: PASSED" -ForegroundColor Green
} else {
    Write-Host "‚ùå Health Check: FAILED" -ForegroundColor Red
    Write-Host "–û—à–∏–±–∫–∞: $($healthTest.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
Write-Host "`n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞..." -ForegroundColor Yellow
$reviewData = @{
    rating = 5
    comment = "–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –û—á–µ–Ω—å –ø–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π."
} | ConvertTo-Json

$reviewTest = Test-API -Method "POST" -Url "http://localhost:3000/api/reviews" -Body $reviewData -Headers @{ "Authorization" = "Bearer $testToken" }
if ($reviewTest.Success -and $reviewTest.Data.success -eq $true) {
    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: PASSED" -ForegroundColor Green
} else {
    Write-Host "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: FAILED" -ForegroundColor Red
    Write-Host "–û—à–∏–±–∫–∞: $($reviewTest.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
Write-Host "`n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)..." -ForegroundColor Yellow
$invalidData = @{
    rating = 6
    comment = "–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
} | ConvertTo-Json

$validationTest = Test-API -Method "POST" -Url "http://localhost:3000/api/reviews" -Body $invalidData -Headers @{ "Authorization" = "Bearer $testToken" }
if (-not $validationTest.Success -and $validationTest.StatusCode -eq 400) {
    Write-Host "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): PASSED" -ForegroundColor Green
} else {
    Write-Host "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): FAILED" -ForegroundColor Red
    Write-Host "–û—à–∏–±–∫–∞: $($validationTest.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
Write-Host "`n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)..." -ForegroundColor Yellow
$authTest = Test-API -Method "POST" -Url "http://localhost:3000/api/reviews" -Body $reviewData
if (-not $authTest.Success -and $authTest.StatusCode -eq 401) {
    Write-Host "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): PASSED" -ForegroundColor Green
} else {
    Write-Host "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): FAILED" -ForegroundColor Red
    Write-Host "–û—à–∏–±–∫–∞: $($authTest.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
Write-Host "`n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..." -ForegroundColor Yellow
$myReviewsTest = Test-API -Method "GET" -Url "http://localhost:3000/api/reviews/my" -Headers @{ "Authorization" = "Bearer $testToken" }
if ($myReviewsTest.Success -and $myReviewsTest.Data.success -eq $true) {
    Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: PASSED" -ForegroundColor Green
} else {
    Write-Host "‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: FAILED" -ForegroundColor Red
    Write-Host "–û—à–∏–±–∫–∞: $($myReviewsTest.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
Write-Host "`n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..." -ForegroundColor Yellow
$statsTest = Test-API -Method "GET" -Url "http://localhost:3000/api/reviews/stats" -Headers @{ "Authorization" = "Bearer $testToken" }
if ($statsTest.Success -and $statsTest.Data.success -eq $true) {
    Write-Host "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: PASSED" -ForegroundColor Green
} else {
    Write-Host "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: FAILED" -ForegroundColor Red
    Write-Host "–û—à–∏–±–∫–∞: $($statsTest.Error)" -ForegroundColor Red
}

Write-Host "`nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Cyan
Write-Host "üí° –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:" -ForegroundColor Yellow
Write-Host "   node test-server.js" -ForegroundColor White
