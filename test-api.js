const http = require('http');
const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    host: 'localhost',
    port: 3000,
    baseUrl: 'http://localhost:3000'
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                try {
                    const jsonBody = JSON.parse(body);
                    resolve({ status: res.statusCode, headers: res.headers, body: jsonBody });
                } catch (e) {
                    resolve({ status: res.statusCode, headers: res.headers, body: body });
                }
            });
        });

        req.on('error', reject);

        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
function generateTestToken() {
    const jwt = require('jsonwebtoken');
    const payload = {
        userId: 123,
        email: 'test@example.com',
        iat: Math.floor(Date.now() / 1000)
    };

    return jwt.sign(payload, 'test_secret', { expiresIn: '1h' });
}

// –¢–µ—Å—Ç—ã
async function runTests() {
    console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI IDE BAS Reviews API...\n');

    const testToken = generateTestToken();
    let passedTests = 0;
    let totalTests = 0;

    // –¢–µ—Å—Ç 1: Health Check
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Health Check...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/health',
            method: 'GET'
        });

        if (response.status === 200 && response.body.status === 'OK') {
            console.log('‚úÖ Health Check: PASSED');
            passedTests++;
        } else {
            console.log('‚ùå Health Check: FAILED');
        }
    } catch (error) {
        console.log('‚ùå Health Check: ERROR -', error.message);
    }

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (—É—Å–ø–µ—à–Ω—ã–π —Å–ª—É—á–∞–π)
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/api/reviews',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${testToken}`
            }
        }, {
            rating: 5,
            comment: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –û—á–µ–Ω—å –ø–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π.'
        });

        if (response.status === 201 && response.body.success === true) {
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: PASSED');
            passedTests++;
        } else {
            console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: FAILED -', response.body);
        }
    } catch (error) {
        console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: ERROR -', error.message);
    }

    // –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è - –Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/api/reviews',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${testToken}`
            }
        }, {
            rating: 6,
            comment: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
        });

        if (response.status === 400) {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): PASSED');
            passedTests++;
        } else {
            console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): FAILED -', response.body);
        }
    } catch (error) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): ERROR -', error.message);
    }

    // –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–∞)...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/api/reviews',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${testToken}`
            }
        }, {
            comment: '–¢–µ—Å—Ç –±–µ–∑ –æ—Ü–µ–Ω–∫–∏'
        });

        if (response.status === 400) {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–∞): PASSED');
            passedTests++;
        } else {
            console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–∞): FAILED -', response.body);
        }
    } catch (error) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–∞): ERROR -', error.message);
    }

    // –¢–µ—Å—Ç 5: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/api/reviews',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, {
            rating: 5,
            comment: '–¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        });

        if (response.status === 401) {
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): PASSED');
            passedTests++;
        } else {
            console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): FAILED -', response.body);
        }
    } catch (error) {
        console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): ERROR -', error.message);
    }

    // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/api/reviews/my',
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${testToken}`
            }
        });

        if (response.status === 200 && response.body.success === true) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: PASSED');
            passedTests++;
        } else {
            console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: FAILED -', response.body);
        }
    } catch (error) {
        console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ERROR -', error.message);
    }

    // –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    totalTests++;
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/api/reviews/stats',
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${testToken}`
            }
        });

        if (response.status === 200 && response.body.success === true) {
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: PASSED');
            passedTests++;
        } else {
            console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: FAILED -', response.body);
        }
    } catch (error) {
        console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: ERROR -', error.message);
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests}`);

    if (passedTests === totalTests) {
        console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
        console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
async function checkServer() {
    try {
        const response = await makeRequest({
            hostname: config.host,
            port: config.port,
            path: '/health',
            method: 'GET'
        });
        return response.status === 200;
    } catch (error) {
        return false;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä...');

    const serverRunning = await checkServer();
    if (!serverRunning) {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
        console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
        console.log('üí° –ò–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: node src/server.js');
        return;
    }

    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');
    await runTests();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { runTests, checkServer };
