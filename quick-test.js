const http = require('http');

console.log('üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç AI IDE BAS Reviews API...\n');

// –¢–µ—Å—Ç 1: Health Check
console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Health Check...');
const healthRequest = http.get('http://localhost:3000/health', (res) => {
  let data = '';
  res.on('data', chunk => data += chunk);
  res.on('end', () => {
    try {
      const response = JSON.parse(data);
      if (response.status === 'OK') {
        console.log('‚úÖ Health Check: PASSED');
        console.log('   –û—Ç–≤–µ—Ç:', response);
      } else {
        console.log('‚ùå Health Check: FAILED');
      }
    } catch (e) {
      console.log('‚ùå Health Check: ERROR -', e.message);
    }
  });
});

healthRequest.on('error', (err) => {
  console.log('‚ùå Health Check: ERROR -', err.message);
  console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: node test-server.js');
});

// –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
setTimeout(() => {
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞...');
  
  const postData = JSON.stringify({
    rating: 5,
    comment: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –û—á–µ–Ω—å –ø–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π.'
  });
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/reviews',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiZW1haWwiOiJ0ZXN0MTIzQGV4YW1wbGUuY29tIiwiaWF0IjoxNzU5MTI3NjgxLCJleHAiOjE3NTkyMTQwODF9.kfhI8XLHFQkEJAjpa77-gMAKmVNvMPXYU5GyanVmmrk'
    }
  };
  
  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', chunk => data += chunk);
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        if (res.statusCode === 201 && response.success === true) {
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: PASSED');
          console.log('   –û—Ç–≤–µ—Ç:', response.message);
        } else {
          console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: FAILED');
          console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
          console.log('   –û—Ç–≤–µ—Ç:', response);
        }
      } catch (e) {
        console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: ERROR -', e.message);
        console.log('   –û—Ç–≤–µ—Ç:', data);
      }
    });
  });
  
  req.on('error', (err) => {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞: ERROR -', err.message);
  });
  
  req.write(postData);
  req.end();
}, 1000);

// –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è
setTimeout(() => {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)...');
  
  const postData = JSON.stringify({
    rating: 6,
    comment: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
  });
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/reviews',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiZW1haWwiOiJ0ZXN0MTIzQGV4YW1wbGUuY29tIiwiaWF0IjoxNzU5MTI3NjgxLCJleHAiOjE3NTkyMTQwODF9.kfhI8XLHFQkEJAjpa77-gMAKmVNvMPXYU5GyanVmmrk'
    }
  };
  
  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', chunk => data += chunk);
    res.on('end', () => {
      if (res.statusCode === 400) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): PASSED');
        console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
      } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞): FAILED');
        console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
        console.log('   –û—Ç–≤–µ—Ç:', data);
      }
    });
  });
  
  req.on('error', (err) => {
    console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: ERROR -', err.message);
  });
  
  req.write(postData);
  req.end();
}, 2000);

// –¢–µ—Å—Ç 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
setTimeout(() => {
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)...');
  
  const postData = JSON.stringify({
    rating: 5,
    comment: '–¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
  });
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/reviews',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    }
  };
  
  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', chunk => data += chunk);
    res.on('end', () => {
      if (res.statusCode === 401) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): PASSED');
        console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
      } else {
        console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞): FAILED');
        console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
        console.log('   –û—Ç–≤–µ—Ç:', data);
      }
    });
  });
  
  req.on('error', (err) => {
    console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ERROR -', err.message);
  });
  
  req.write(postData);
  req.end();
}, 3000);

// –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
setTimeout(() => {
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/reviews/my',
    method: 'GET',
    headers: {
      'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiZW1haWwiOiJ0ZXN0MTIzQGV4YW1wbGUuY29tIiwiaWF0IjoxNzU5MTI3NjgxLCJleHAiOjE3NTkyMTQwODF9.kfhI8XLHFQkEJAjpa77-gMAKmVNvMPXYU5GyanVmmrk'
    }
  };
  
  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', chunk => data += chunk);
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        if (res.statusCode === 200 && response.success === true) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤: PASSED');
          console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤:', response.data.reviews.length);
        } else {
          console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤: FAILED');
          console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
          console.log('   –û—Ç–≤–µ—Ç:', response);
        }
      } catch (e) {
        console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤: ERROR -', e.message);
        console.log('   –û—Ç–≤–µ—Ç:', data);
      }
    });
  });
  
  req.on('error', (err) => {
    console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤: ERROR -', err.message);
  });
  
  req.end();
}, 4000);

// –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
setTimeout(() => {
  console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/reviews/stats',
    method: 'GET',
    headers: {
      'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiZW1haWwiOiJ0ZXN0MTIzQGV4YW1wbGUuY29tIiwiaWF0IjoxNzU5MTI3NjgxLCJleHAiOjE3NTkyMTQwODF9.kfhI8XLHFQkEJAjpa77-gMAKmVNvMPXYU5GyanVmmrk'
    }
  };
  
  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', chunk => data += chunk);
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        if (res.statusCode === 200 && response.success === true) {
          console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: PASSED');
          console.log('   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:', response.data.statistics.totalReviews);
          console.log('   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:', response.data.statistics.averageRating);
        } else {
          console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: FAILED');
          console.log('   –°—Ç–∞—Ç—É—Å:', res.statusCode);
          console.log('   –û—Ç–≤–µ—Ç:', response);
        }
      } catch (e) {
        console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ERROR -', e.message);
        console.log('   –û—Ç–≤–µ—Ç:', data);
      }
    });
  });
  
  req.on('error', (err) => {
    console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ERROR -', err.message);
  });
  
  req.end();
}, 5000);

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
setTimeout(() => {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üí° –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:');
  console.log('   node test-server.js');
  process.exit(0);
}, 6000);
